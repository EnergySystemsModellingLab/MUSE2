#!/usr/bin/env python3
#
# A script to generate markdown documentation from table schemas.

from table2md import MarkdownTable
import yaml
from pathlib import Path

_DOCS_DIR = Path(__file__).parent
_SCHEMA_DIR = _DOCS_DIR.parent / "schemas" / "input"
_FILE_ORDER = {
    "Time slices": ["time_slices"],
    "Regions": ["regions"],
    "Agents": ["agents", "agent_*"],
    "Assets": ["assets"],
    "Commodities": ["commodities", "commodity_levies", "demand", "demand_slicing"],
    "Processes": ["processes", "process_*"],
}


def generate_markdown() -> str:
    out = (
        "# Input file format\n"
        f"<!-- Automatically generated by {Path(__file__).name}. Do not edit manually. -->\n"
        "<!-- markdownlint-disable MD013 -->\n"
        "<!-- markdownlint-disable MD033 -->\n"
    )

    for title, patterns in _FILE_ORDER.items():
        out += f"\n## {title}\n"

        for pattern in patterns:
            paths = map(str, _SCHEMA_DIR.glob(f"{pattern}.yaml"))
            for path in map(Path, sorted(paths)):
                out += process_file(path)

    return out


def process_file(path: Path) -> str:
    out = f"\n### `{path.stem}.csv`\n\n"
    with path.open() as f:
        data = yaml.safe_load(f)

    out += f"{add_full_stop(data['title'])}\n\n"

    try:
        table_str, notes_str = fields2table(data["fields"])
        out += table_str
    except KeyError:
        print(f"MISSING VALUE IN {path}")
        raise

    desc = data.get("description", "")
    if not desc and not notes_str:
        return out

    out += "\n#### Notes\n\n"

    if desc:
        out += f"{add_full_stop(desc)}\n\n"

    if notes_str:
        out += notes_str

    return out


def add_full_stop(s: str) -> str:
    s = s.rstrip()
    if s == "" or s.endswith("."):
        return s
    else:
        return f"{s}."


def fields2table(fields: list[dict[str, str]]) -> tuple[str, str]:
    data = []
    notes = []
    for f in fields:
        row = {"Field": f"`{f['name']}`", "Description": f["title"]}
        data.append(row)

        if desc := f.get("description", ""):
            # MarkdownTable can't handle newlines, so replace with HTML equivalent
            desc = desc.replace("\n\n", "<br /><br />").replace("\n", " ")
            row = {"Field": f"`{f['name']}`", "Notes": desc}
            notes.append(row)

    data = [
        {
            "Field": f"`{f['name']}`",
            "Description": f["title"],
        }
        for f in fields
    ]

    table_str = str(MarkdownTable.from_dicts(data))
    notes_str = str(MarkdownTable.from_dicts(notes)) if notes else ""
    return table_str, notes_str


if __name__ == "__main__":
    output_path = _DOCS_DIR / "input_format.md"
    output_path.write_text(generate_markdown(), encoding="utf-8")
